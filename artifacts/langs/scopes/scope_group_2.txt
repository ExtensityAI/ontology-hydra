# Scope Document: The Fundamentals of Different Programming Languages

## 1. Domain Boundaries

### 1.1 Inclusion
This domain covers the following key areas:
- **Programming Paradigms**: Exploration of various paradigms such as procedural, object-oriented, functional, and declarative programming.
- **Syntax and Semantics**: Examination of the structure (syntax) and meaning (semantics) of different programming languages.
- **Language Types**: Discussion of different language classifications, including:
  - High-level vs. low-level languages
  - Compiled vs. interpreted languages
  - Statically typed vs. dynamically typed languages
- **Key Features of Popular Languages**: Analysis of fundamental features in languages such as C, C++, Python, Java, Ruby, JavaScript, and others.
- **Programming Language Design**: Basic concepts in language creation and design, including syntax, type systems, and user experience considerations.
- **Accessibility in Programming**: Initiatives and strategies to improve programming education access for diverse groups.
  
### 1.2 Exclusion
This domain explicitly does not include:
- Advanced specific language techniques (e.g., optimizations for compiler design).
- In-depth analysis of programming frameworks or libraries (e.g., React, Django).
- Application-specific programming (e.g., game dev, web development nuances).
- Detailed algorithms or data structures beyond basic definitions related to language foundations.

### 1.3 Gray Areas
The following areas may overlap with adjacent domains:
- **Programming Education**: While this domain involves educational concepts related to programming languages, it does not delve deeply into pedagogical techniques or curricula design.
- **Software Development Practices**: The use of programming languages in software development methodologies (like Agile, DevOps) will be acknowledged but not comprehensively covered.
  
## 2. Core Terminology

### 2.1 Programming Paradigms
- **Procedural Programming**: A type of programming in which instructions are executed in a sequence.
- **Object-Oriented Programming**: A paradigm based on the concept of "objects," which contain data and methods.
- **Functional Programming**: A paradigm that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.

### 2.2 Language Characteristics
- **Syntax**: The set of rules that defines the combinations of symbols that are considered to be correctly structured programs.
- **Semantics**: The meaning or interpretation of a programâ€™s statements.
- **Type System**: The classification of data types and how they can interact in a programming language.

### 2.3 Language Classification
- **High-Level Language**: A programming language that is more abstracted from machine code, often easier for humans to read and write (e.g., Python, Java).
- **Low-Level Language**: A language that closely represents machine level operations (e.g., Assembly language).
- **Compiled Language**: A language that is translated into machine code before being executed (e.g., C, C++).
- **Interpreted Language**: A language that is executed line-by-line or statement-by-statement at runtime (e.g., Python, JavaScript).
  
### 2.4 Key Programming Languages
- **C**: A widely used, low-level procedural programming language famous for its efficiency and control over computer resources.
- **Python**: An interpreted high-level language known for its readability and versatility, often used in scientific computing, data science, and web development.
- **Java**: An object-oriented language that is platform-independent and widely used in enterprise applications.
- **JavaScript**: A high-level, interpreted scripting language primarily used for web development.

### 2.5 Accessibility Terms
- **Programming Literacy**: The ability to read, write, and understand programming languages.
- **Diversity and Inclusion in Tech**: The initiative to create an equitable tech environment by supporting underrepresented groups in the field of programming.

This scope document establishes clear definitions and boundaries for discussions related to the fundamentals of different programming languages, identifying key topics and critical terminology for future collaboration and exploration within this domain.